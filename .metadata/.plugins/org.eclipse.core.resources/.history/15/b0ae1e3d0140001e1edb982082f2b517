package application;

import java.util.Queue;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import java.awt.*;
import java.awt.event.ActionEvent;

public class DictionaryServer {
    private int numberOfWorkers;
    private ThreadPool threadPool;  // Ensure ThreadPool class is defined elsewhere

    public static void main(String[] args) {
        new DictionaryServer().initializeServerGUI();
    }

    private void initializeServerGUI() {
        Frame frame = new Frame("Dictionary Server Management");

        Panel serverControl = new Panel();
        Label lblServerStatus = new Label("Status: Stopped");
        TextField workerField = new TextField(String.valueOf(Runtime.getRuntime().availableProcessors()));
        workerField.setColumns(5);
        Button startButton = new Button("Start Server");
        Button stopButton = new Button("Stop Server");

        startButton.addActionListener(event -> {
            numberOfWorkers = Integer.parseInt(workerField.getText());
            threadPool = new ThreadPool(numberOfWorkers);  // Ensure ThreadPool class is properly defined and imported
            lblServerStatus.setText("Status: Running");
            // TODO: Start the actual server logic (like listening for client connections)
        });

        stopButton.addActionListener(event -> {
            if (threadPool != null) {
                threadPool.shutdown();
            }
            lblServerStatus.setText("Status: Stopped");
        });

        serverControl.add(new Label("Initial Workers:"));
        serverControl.add(workerField);
        serverControl.add(startButton);
        serverControl.add(stopButton);
        serverControl.add(lblServerStatus);

        Panel workerControl = new Panel();
        Button increaseWorkersButton = new Button("Increase Workers");
        Button decreaseWorkersButton = new Button("Decrease Workers");
        Label lblCurrentWorkers = new Label("Current Workers: " + numberOfWorkers);

        increaseWorkersButton.addActionListener(event -> {
            // TODO: Logic to increase the number of workers
            if (threadPool != null) {
                threadPool.increaseWorkers();
                numberOfWorkers++;
                lblCurrentWorkers.setText("Current Workers: " + numberOfWorkers);
            }
        });

        decreaseWorkersButton.addActionListener(event -> {
            // TODO: Logic to decrease the number of workers
            if (threadPool != null && numberOfWorkers > 0) {
                threadPool.decreaseWorkers();
                numberOfWorkers--;
                lblCurrentWorkers.setText("Current Workers: " + numberOfWorkers);
            }
        });

        workerControl.add(increaseWorkersButton);
        workerControl.add(decreaseWorkersButton);
        workerControl.add(lblCurrentWorkers);

        Panel dictionaryDisplay = new Panel();
        Button showDictionaryButton = new Button("Show Dictionary");
        TextArea dictionaryArea = new TextArea(5, 50);
        dictionaryArea.setEditable(false);
        dictionaryDisplay.add(showDictionaryButton);
        dictionaryDisplay.add(dictionaryArea);

        TextArea logArea = new TextArea(10, 50);
        logArea.setEditable(false);

        Panel mainPanel = new Panel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.add(serverControl);
        mainPanel.add(workerControl);
        mainPanel.add(dictionaryDisplay);
        mainPanel.add(logArea);

        frame.add(mainPanel);
        frame.pack();
        frame.setVisible(true);

        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                System.exit(0);
            }
        });
    }
}
class WorkerThread extends Thread {
    private final Queue<Runnable> taskQueue;
    private boolean isStopped = false;

    public WorkerThread(Queue<Runnable> taskQueue) {
        this.taskQueue = taskQueue;
    }

    @Override
    public void run() {
        while (!isStopped) {
            Runnable task = null;
            synchronized (taskQueue) {
                while (taskQueue.isEmpty() && !isStopped) {
                    try {
                        taskQueue.wait();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        return;
                    }
                }
                if (!taskQueue.isEmpty()) {
                    task = taskQueue.poll();
                }
            }
            if (task != null) {
                task.run();
            }
        }
    }

    public void stopWorker() {
        isStopped = true;
        synchronized (taskQueue) {
            taskQueue.notifyAll();
        }
    }
}

class ThreadPool {
    private final Queue<Runnable> taskQueue = new LinkedList<>();
    private final List<WorkerThread> threads;
    private final int poolSize;

    public ThreadPool(int poolSize) {
        this.poolSize = poolSize;
        threads = new ArrayList<>(poolSize);

        // Initialize and start worker threads
        for (int i = 0; i < poolSize; i++) {
            WorkerThread worker = new WorkerThread(taskQueue);
            threads.add(worker);
            worker.start();
        }
    }

    public void submit(Runnable task) {
        synchronized (taskQueue) {
            taskQueue.add(task);
            taskQueue.notify();
        }
    }

    public void shutdown() {
        for (WorkerThread worker : threads) {
            worker.stopWorker();
        }
    }

    public void increaseWorkers() {
        WorkerThread worker = new WorkerThread(taskQueue);
        threads.add(worker);
        worker.start();
    }

    public void decreaseWorkers() {
        if (!threads.isEmpty()) {
            WorkerThread worker = threads.remove(threads.size() - 1);
            worker.stopWorker();
        }
    }
}
